#include <stdio.h>
#define MAX 100

int push(int stack[], int top, int value) {
    if (top == MAX - 1) {
        printf("Stack overflow\n");
        return top;
    }
    stack[++top] = value;
    return top;
}

int pop(int stack[], int top) {
    if (top == -1) {
        printf("Stack underflow\n");
        return -1;
    }
    return top - 1;
}

int peek(int stack[], int top) {
    if (top == -1) {
        printf("Stack is empty\n");
        return -1;
    }
    return stack[top];
}

int isEmpty(int top) {
    return top == -1;
}

int sortStack(int stack[], int top) {
    int auxStack[MAX];
    int top2 = -1;
    while (!isEmpty(top)) {
        int temp = stack[top--];
        while (!isEmpty(top2) && peek(auxStack, top2) < temp) {
            top = push(stack, top, auxStack[top2--]);
        }
        top2 = push(auxStack, top2, temp);
    }
    while (!isEmpty(top2)) {
        top = push(stack, top, auxStack[top2--]);
    }
    return top;
}

int main() {
    int stack[MAX];
    int top = -1;
    int choice;
    int value;
    
    do {
        printf("1. Push\n2. Pop\n3. Sort Stack\n4. Exit\nEnter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                if (top == MAX - 1) {
                    printf("Stack overflow\n");
                } else {
                    printf("Enter value to push: ");
                    scanf("%d", &value);
                    top = push(stack, top, value);
                }
                break;
            case 2:
                if (!isEmpty(top)) {
                    value = stack[top];
                    top = pop(stack, top);
                    printf("Popped value: %d\n", value);
                }
                break;
            case 3:
                if (!isEmpty(top)) {
                    top = sortStack(stack, top);
                    for (int i = top; i >= 0; i--) {
                        printf("%d\n", stack[i]);
                    }
                } else {
                    printf("Stack is empty.\n");
                }
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice\n");
                break;
        }
    } while (choice != 4);
    
    return 0;
}
